
#Para descar una imagen de una ruta especifica
curl https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Ada_Lovelace_portrait.jpg/800px-Ada_Lovelace_portrait.jpg --output ada.jpg

#Usa el comando gsutil cp para subir la imagen de la ubicación en la que guardaste el bucket que creaste
gsutil cp ada.jpg gs://mnacloud_bucket_test1

#Quitar la imagen
rm ada.jpg

#Usa el comando gsutil cp para descargar la imagen que almacenaste en el bucket a Cloud Shell:
gsutil cp -r gs://mnacloud_bucket_test1/ada.jpg .

#Usa el comando gsutil cp para crear una carpeta llamada image-folder y copia la imagen (ada.jpg) en ella:
gsutil cp gs://mnacloud_bucket_test1/ada.jpg gs://mnacloud_bucket_test1/image-folder/


#Usa el comando gsutil ls para mostrar el contenido de un bucket:
gsutil ls gs://mnacloud_bucket_test1


#Usa el comando gsutil ls con la marca -l para obtener algunos detalles del archivo de imagen que subiste al bucket:
gsutil ls -l gs://mnacloud_bucket_test1/ada.jpg

#Usa el comando gsutil acl ch a fin de que todos los usuarios tengan permisos de lectura para el objeto almacenado en el bucket:
gsutil acl ch -u AllUsers:R gs://mnacloud_bucket_test1/ada.jpg

#Para quitar este permiso, ejecuta el siguiente comando:
gsutil acl ch -d AllUsers gs://mnacloud_bucket_test1/ada.jpg

#Use el comando gsutil rm para borrar un objeto; en este caso, el archivo de imagen del bucket:
gsutil rm gs://mnacloud_bucket_test1/ada.jpg

"SQL"

SQLpass = O^%vOZN0L]<@'DZc
instanceid = myinstance

#conéctate a tu instancia de Cloud SQL ejecutando el siguiente comando:
gcloud sql connect myinstance --user=root

#Crea una base de datos SQL llamada Guestbook en tu instancia de Cloud SQL:
CREATE DATABASE Guestbook;


#Inserta los siguientes datos de muestra en la base de datos del Guestbook:
USE guestbook;
CREATE TABLE entries (guestName VARCHAR(255), content VARCHAR(255),
    entryID INT NOT NULL AUTO_INCREMENT, PRIMARY KEY(entryID));
    INSERT INTO entries (guestName, content) values ("first guest", "I got here!");
INSERT INTO entries (guestName, content) values ("second guest", "Me too!");

#Ahora recupera los datos:
SELECT * FROM entries;

"APIS"
#e detalla a continuación en Cloud Shell para obtener las secuencias de comandos y la API de muestra:
gsutil cp gs://spls/gsp164/endpoints-quickstart.zip .
unzip endpoints-quickstart.zip

#Dirígete al directorio con el comando cd que contiene el código de muestra:

cd endpoints-quickstart


#Ejecuta la siguiente secuencia de comandos que se incluye en la muestra
./deploy_api.sh

#Para implementar el backend de la API, asegúrese de estar en el directorio endpoints-quickstart/scripts. Luego, ejecuta la siguiente secuencia de comandos:
./deploy_app.sh

#Enviamos solicitudes para revisar que la API nos conteste
./query_api.sh

#Ejecuta la siguiente secuencia de comandos de generación de tráfico en Cloud Shell para propagar información a los grafos y registro
./generate_traffic.sh

#Implementa la configuración de Endpoints que tiene una cuota
./deploy_api.sh ../openapi_with_ratelimit.yaml

#se reeimplementa con los cambios ejecutados en el script anterior
./deploy_app.sh

API key 1= AIzaSyBenNlFti6-IqHwe_gRSlctPGBX9OhQQIM


#En Cloud Shell, ingrese lo siguiente. Reemplaza YOUR-API-KEY por la clave de API que acabas de crear:
export API_KEY="la key creada"

#
./query_api_with_key.sh $API_KEY

#Ahora, la API tiene un límite de 5 solicitudes por segundo. Ejecuta el siguiente comando para enviar tráfico a la API y activar el límite de la cuota:
./generate_traffic_with_key.sh $API_KEY


"Python"

#Se utilizan entornos virtuales de Python para aislar del sistema la instalación de paquetes.
apt-get install -y virtualenv

#Ejecute el siguiente comando para instalar la biblioteca cliente:
pip install --upgrade google-cloud-pubsub

#Clone un repositorio de GitHub para obtener el código de muestra:
git clone https://github.com/googleapis/python-pubsub.git

#Navegue al siguiente directorio:
cd python-pubsub/samples/snippets

#En Cloud Shell, su ID del proyecto debería almacenarse automáticamente en la variable de entorno GOOGLE_CLOUD_PROJECT
echo $GOOGLE_CLOUD_PROJECT

#publisher.py es una secuencia de comandos que demuestra cómo realizar operaciones básicas en temas con la API de Cloud Pub/Sub. Vea el contenido de la secuencia de comandos del publicador:
cat publisher.py

#Para obtener información sobre la secuencia de comandos del publicador, ingrese lo siguiente:
python publisher.py -h

#Ejecute la secuencia de comandos del publicador para crear el tema de Pub/Sub:
python publisher.py $GOOGLE_CLOUD_PROJECT create MyTopic

#El siguiente comando muestra una lista de todos los temas de Pub/Sub en un proyecto determinado:
python publisher.py $GOOGLE_CLOUD_PROJECT list

#Cree una suscripción de Pub/Sub para el tema con la secuencia de comandos subscriber.py:
python subscriber.py $GOOGLE_CLOUD_PROJECT create MyTopic MySub

#El siguiente comando muestra una lista de los suscriptores en el proyecto proporcionado:
python subscriber.py $GOOGLE_CLOUD_PROJECT list-in-project

#Publique algunos mensajes más en MyTopic. Para ello, ejecute los siguientes comandos (reemplace <YOUR NAME> por su nombre y <FOOD> por una comida que le guste):

gcloud pubsub topics publish MyTopic --message "Publisher's name is Fausto"

gcloud pubsub topics publish MyTopic --message "Publisher likes to eat Tacos"

gcloud pubsub topics publish MyTopic --message "Publisher thinks Pub/Sub is awesome"

"Identity Aware Proxy"

#Descarga el código de un bucket de almacenamiento público y, luego, cambia a la carpeta de código:
gsutil cp gs://spls/gsp499/user-authentication-with-iap.zip .
unzip user-authentication-with-iap.zip
cd user-authentication-with-iap

#Cambias de localizacion
cd 1-HelloWorld

cat main.py

#Implementa la aplicación en el entorno estándar de App Engine para Python.
gcloud app deploy

"Selecciona una región cercana a ti que diga que es compatible con el entorno estándar.

Cuando se te pregunte si deseas continuar, presiona Y para indicar que sí."

gcloud app browse

#En Cloud Shell, ejecuta este comando para inhabilitar la API de Flex:
gcloud services disable appengineflex.googleapis.com

"Tarea 2: Accede a la información de identidad del usuario"

#En Cloud Shell, cambia a la carpeta para este paso
cd ~/user-authentication-with-iap/2-HelloUser

#Realizar una implementación en App Engine
gcloud app deploy


#Como la aplicación ahora está desprotegida, un usuario podría enviar una solicitud web que parecería haber pasado por IAP. Para hacer eso, por ejemplo, puedes ejecutar el siguiente comando curl desde Cloud Shell (reemplaza <your-url-here> por la URL correcta de tu aplicación):
curl -X GET https://qwiklabs-gcp-04-fb64466fdb88.ue.r.appspot.com/ -H "X-Goog-Authenticated-User-Email: totally fake email"

"Tarea 3: Utiliza la verificación criptográfica"

#cambiamos de carpeta
cd ~/user-authentication-with-iap/3-HelloVerifiedUser

#Realiazamo la impleementacion de un app engine
gcloud app deploy

"Esta carpeta contiene el mismo conjunto de archivos que 2-HelloUser,
pero se modificaron dos de los archivos y hay un archivo nuevo. El archivo nuevo es auth.py.
 Este proporciona un método user() para recuperar y verificar la información de identidad con firma criptográfica.
 Los archivos modificados son main.py y templates/index.html, que ahora utilizan los resultados de ese método. A modo de comparación,
también se muestran los encabezados no verificados como en la última implementación."

def user():
    assertion = request.headers.get('X-Goog-IAP-JWT-Assertion')
    if assertion is None:
        return None, None
    info = jwt.decode(
        assertion,
        keys(),
        algorithms=['ES256'],
        audience=audience()
    )
    return info['email'], info['sub']
#probamos la verificacion cryptografica
gcloud app browse

"Todo aparece como none en los ids al habilitar IAP y refrescar
Hello, accounts.google.com:student-03-ac04ab566a60@qwiklabs.net! Your persistent ID appears to be accounts.google.com:108911551190843812415."

"IAM"

Bucket=mnabucket1
gsutil ls gs://mnabucket1

